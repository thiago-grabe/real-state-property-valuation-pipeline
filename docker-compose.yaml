services:
  tracking_server:
    restart: always
    image: ghcr.io/mlflow/mlflow:latest
    container_name: mlflow_server
    ports:
      - "${MLFLOW_PORT}:5000"
    networks:
      backend:
        aliases:
          - tracking_server
    environment:
      - MLFLOW_TRACKING_URI=http://tracking_server:5000
    
    volumes:
      - mlflow_data:/mlflow
    command: >
      mlflow server 
      --backend-store-uri sqlite:////mlflow/mlflow.db
      --host 0.0.0.0
      --port 5000

  vault:
    restart: always
    image: vault:1.13.3
    container_name: vault_server
    ports:
      - "${VAULT_PORT}:8200"
    networks:
      - frontend
      - backend
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_DEV_ROOT_TOKEN}
      VAULT_ADDR: "http://0.0.0.0:${VAULT_PORT}"
      VAULT_API_ADDR: "http://localhost:${VAULT_PORT}"
    entrypoint: >
      /bin/sh -c "
      vault server -dev -dev-root-token-id=${VAULT_DEV_ROOT_TOKEN} -dev-listen-address=0.0.0.0:${VAULT_PORT}"

  vault-init:
    image: vault:1.13.3
    container_name: vault_initializer
    depends_on:
      - vault
    networks:
      - frontend
      - backend
    environment:
      VAULT_PORT: ${VAULT_PORT}
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_DEV_ROOT_TOKEN}
      VAULT_ADDR: "http://vault:${VAULT_PORT}"
      VAULT_API_ADDR: "http://vault:${VAULT_PORT}"
    entrypoint: >
      /bin/sh -c "
      sleep 5 &&
      export VAULT_TOKEN=${VAULT_DEV_ROOT_TOKEN} &&
      vault secrets enable -path=kv kv &&
      vault kv put kv/APIKEY apikey=${API_KEY} &&
      echo 'Vault initialization complete.'"

  redis:
    restart: always
    image: redis:latest
    container_name: redis_server
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - frontend
      - backend
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]

  redis_ui:
    restart: always
    image: redis/redis-stack:latest
    container_name: redis_ui
    ports:
      - "${REDIS_UI_PORT}:8001"
    networks:
      - frontend
      - backend
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_server
    restart: always
    ports:
      - "8000:8000"
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000
    networks:
      - frontend
      - backend
    depends_on:
      - redis

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: bash -c "PYTHONPATH=/app/src rq worker training-queue"
    container_name: rq_worker
    working_dir: /app
    links:
      - tracking_server
    restart: always
    depends_on:
      - redis
      - tracking_server
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PYTHONPATH=/app/src
      - MLFLOW_TRACKING_URI=http://tracking_server:5000
    networks:
      - backend

volumes:
  mlflow_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
